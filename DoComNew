from transformers import AutoModelForCausalLM, AutoTokenizer
import torch

class DoctorChatbot:
    def __init__(self, model_name="microsoft/DialoGPT-medium"):
        self.tokenizer = AutoTokenizer.from_pretrained(model_name)
        self.model = AutoModelForCausalLM.from_pretrained(model_name)
        self.chat_history_ids = None
        self.user_name = "Patient"
        self.doctor_name = "DoctorBot"
    
    def generate_response(self, user_input):
        # Tokenize user input and add to chat history
        new_input_ids = self.tokenizer.encode(f"{self.user_name}: {user_input}\n{self.doctor_name}:",
                                              return_tensors="pt")
        self.chat_history_ids = (torch.cat([self.chat_history_ids, new_input_ids], dim=-1)
                                 if self.chat_history_ids is not None else new_input_ids)
        
        # Generate a response
        response_ids = self.model.generate(self.chat_history_ids, max_length=1000, pad_token_id=self.tokenizer.eos_token_id)
        response = self.tokenizer.decode(response_ids[:, self.chat_history_ids.shape[-1]:][0], skip_special_tokens=True)
        
        return response

    def chat(self):
        print(f"{self.doctor_name}: Hello! I am here to assist you with your health concerns. How can I help today?")
        while True:
            user_input = input(f"{self.user_name}: ")
            if user_input.lower() in ["exit", "quit"]:
                print(f"{self.doctor_name}: Take care! If needed, consult a licensed medical professional.")
                break
            response = self.generate_response(user_input)
            print(f"{self.doctor_name}: {response}")

if __name__ == "__main__":
    chatbot = DoctorChatbot()
    chatbot.chat()
