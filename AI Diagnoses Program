# Code for an AI company diagnosing cancer
import numpy as np
import pandas as pd
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import time
import os
import json
import matplotlib.pyplot as plt
from sklearn.metrics import classification_report, confusion_matrix

# Loading an AI model
def load_diagnosis_model():
    print("[INFO] Loading AI model for cancer diagnosis...")
    time.sleep(2)  # Simulate load time
    model = load_model("/path/to/model.h5")  # Placeholder path
    print("[INFO] Model loaded successfully.")
    return model

# Preprocessing medical images
def preprocess_images(image_directory):
    print("[INFO] Preprocessing medical images...")
    time.sleep(1.5)  # Simulate processing time
    datagen = ImageDataGenerator(rescale=1.0/255.0)
    generator = datagen.flow_from_directory(
        image_directory,
        target_size=(224, 224),
        batch_size=32,
        class_mode=None
    )
    print("[INFO] Images preprocessed successfully.")
    return generator

# Running diagnosis
def run_diagnosis(model, images):
    print("[INFO] Running cancer diagnosis analysis...")
    time.sleep(3)  # Simulate processing time
    results = model.predict(images, verbose=1)
    return results

# Generating a report
def generate_report(results):
    print("[INFO] Generating diagnostic report...")
    time.sleep(2)  # Simulate report generation
    report = pd.DataFrame({
        "PatientID": [f"P{1000 + i}" for i in range(len(results))],
        "CancerProbability": [round(prob[0], 4) for prob in results]
    })
    print("[INFO] Report generated successfully.")
    return report

# Evaluating model performance
def evaluate_model(y_true, y_pred):
    print("[INFO] Evaluating model performance...")
    time.sleep(1.5)  # Simulate evaluation time
    report = classification_report(y_true, y_pred, target_names=["No Cancer", "Cancer"])
    matrix = confusion_matrix(y_true, y_pred)
    print("[INFO] Evaluation complete.")
    return report, matrix

# Plotting results
def plot_results(results):
    print("[INFO] Plotting diagnostic probabilities...")
    plt.hist(results, bins=50, color='blue', alpha=0.7)
    plt.title("Cancer Probability Distribution")
    plt.xlabel("Probability")
    plt.ylabel("Frequency")
    plt.grid(True)
    plt.savefig("diagnosis_histogram.png")
    print("[INFO] Plot saved as diagnosis_histogram.png.")

# Logging system activity
def log_activity(activity):
    print(f"[LOG] {activity}")
    with open("system_log.txt", "a") as log_file:
        log_file.write(f"{time.strftime('%Y-%m-%d %H:%M:%S')} - {activity}\n")

# Generating a JSON report
def generate_json_report(results):
    print("[INFO] Generating JSON diagnostic report...")
    report_data = {
        "patients": [
            {"id": f"P{1000 + i}", "cancer_probability": float(round(prob[0], 4))} for i, prob in enumerate(results)
        ]
    }
    with open("diagnostic_report.json", "w") as json_file:
        json.dump(report_data, json_file, indent=4)
    print("[INFO] JSON report saved as diagnostic_report.json.")

# Handling errors
def handle_error(error_message):
    print(f"[ERROR] {error_message}")
    log_activity(f"Error: {error_message}")

# Main function simulating the workflow
def main():
    print("[START] AI-Powered Cancer Diagnosis System\n")
    try:
        log_activity("System started.")
        model = load_diagnosis_model()
        images = preprocess_images("/path/to/images")
        results = run_diagnosis(model, images)
        generate_report(results)
        plot_results([prob[0] for prob in results])
        generate_json_report(results)
        log_activity("Diagnosis process completed successfully.")
    except Exception as e:
        handle_error(str(e))

# Executing the system
if __name__ == "__main__":
    main()

# Additional utility functions for extended functionality

def backup_data():
    print("[INFO] Backing up diagnostic data...")
    time.sleep(1.5)
    print("[INFO] Data backup completed successfully.")

def send_alert(patient_id, probability):
    if probability > 0.85:
        print(f"[ALERT] High cancer probability detected for patient {patient_id}.")
        time.sleep(0.5)

# Alerting on results
def process_alerts(results):
    print("[INFO] Processing alerts for high-risk patients...")
    for i, prob in enumerate(results):
        send_alert(f"P{1000 + i}", prob[0])
    print("[INFO] Alert processing completed.")

# Adding more lines for detailed system activity
for i in range(10):
    log_activity(f"Activity log entry {i}.")
